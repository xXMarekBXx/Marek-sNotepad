import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import javax.swing.JFileChooser;




/**
 *
 * @author Marek
 */
public class Notatnik extends javax.swing.JFrame {

       
    
    public Notatnik() {
                              
        int szerokoscEkranu = Toolkit.getDefaultToolkit().getScreenSize().width; //pobiera szerokość ekranu i przypisuje jądo zmiennej szerokosc
        int wysokoscEkranu = Toolkit.getDefaultToolkit().getScreenSize().height; //pobiera wysokosc ekranu i przypisuje jądo zmiennej wysokosc

        this.setSize(szerokoscEkranu / 2, wysokoscEkranu / 2); // ustawia rozmiar ramki na szerokość ekranu/2 i wysokość ekranu /2

        int szerokoscRamki = this.getSize().width; // pobiera szerokość ramki
        int wysokoscRamki = this.getSize().height; // pobiera wysokość ramki

        this.setLocation((szerokoscEkranu - szerokoscRamki)/2, (wysokoscEkranu - wysokoscRamki)/2);

        this.setIconImage(Toolkit.getDefaultToolkit().getImage("notatnik.jpg")); //Ustawia ikonkę

        this.initComponents();
                        
        this.setDefaultCloseOperation(3); // wyłącza ramkę x-em

        this.setVisible(true); // ustawia widzialność ramki na true
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        pasekMenuBar = new javax.swing.JMenuBar();
        gorneMenuFile = new javax.swing.JMenu();
        menuNew = new javax.swing.JMenuItem();
        menuOpen = new javax.swing.JMenuItem();
        menuSave = new javax.swing.JMenuItem();
        menuSaveAs = new javax.swing.JMenuItem();
        jSaveAsFile = new javax.swing.JMenuItem();
        menuClose = new javax.swing.JMenuItem();
        gorneMenuEdit = new javax.swing.JMenu();
        menuUndo = new javax.swing.JMenuItem();
        menuCut = new javax.swing.JMenuItem();
        menuCopy = new javax.swing.JMenuItem();
        menuPaste = new javax.swing.JMenuItem();
        menuDelete = new javax.swing.JMenuItem();
        menuFind = new javax.swing.JMenuItem();
        gorneMenuHelp = new javax.swing.JMenu();
        menuInformation = new javax.swing.JMenuItem();
        menuAboutMe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Maroo's Note");

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextAreaKeyTyped(evt);
            }
        });
        jScrollPane.setViewportView(jTextArea);

        gorneMenuFile.setText("File");

        menuNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuNew.setText("New");
        menuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewActionPerformed(evt);
            }
        });
        gorneMenuFile.add(menuNew);

        menuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuOpen.setText("Open ...");
        menuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenActionPerformed(evt);
            }
        });
        gorneMenuFile.add(menuOpen);

        menuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuSave.setText("Save");
        menuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveActionPerformed(evt);
            }
        });
        gorneMenuFile.add(menuSave);

        menuSaveAs.setText("Save As");
        menuSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveAsActionPerformed(evt);
            }
        });
        gorneMenuFile.add(menuSaveAs);

        jSaveAsFile.setText("Save File As ...");
        jSaveAsFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveAsFileActionPerformed(evt);
            }
        });
        gorneMenuFile.add(jSaveAsFile);

        menuClose.setText("Close");
        menuClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCloseActionPerformed(evt);
            }
        });
        gorneMenuFile.add(menuClose);

        pasekMenuBar.add(gorneMenuFile);

        gorneMenuEdit.setText("Edit");

        menuUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        menuUndo.setText("Undo");
        menuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuUndoActionPerformed(evt);
            }
        });
        gorneMenuEdit.add(menuUndo);

        menuCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        menuCut.setText("Cut");
        menuCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCutActionPerformed(evt);
            }
        });
        gorneMenuEdit.add(menuCut);

        menuCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        menuCopy.setText("Copy");
        menuCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCopyActionPerformed(evt);
            }
        });
        gorneMenuEdit.add(menuCopy);

        menuPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        menuPaste.setText("Paste");
        menuPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPasteActionPerformed(evt);
            }
        });
        gorneMenuEdit.add(menuPaste);

        menuDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        menuDelete.setText("Delete");
        menuDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDeleteActionPerformed(evt);
            }
        });
        gorneMenuEdit.add(menuDelete);

        menuFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        menuFind.setText("Find");
        menuFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFindActionPerformed(evt);
            }
        });
        gorneMenuEdit.add(menuFind);

        pasekMenuBar.add(gorneMenuEdit);

        gorneMenuHelp.setText("Help");

        menuInformation.setText("About this project");
        menuInformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuInformationActionPerformed(evt);
            }
        });
        gorneMenuHelp.add(menuInformation);

        menuAboutMe.setText("About Me");
        menuAboutMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAboutMeActionPerformed(evt);
            }
        });
        gorneMenuHelp.add(menuAboutMe);

        pasekMenuBar.add(gorneMenuHelp);

        setJMenuBar(pasekMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 807, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveActionPerformed
       
        try {          
            Writer writer = new FileWriter("Maroo's Note.txt");
            
            writer.write(jTextArea.getText());
            writer.close();
            
        } catch (IOException ex) {
            System.out.println("Błąd: " + ex.getMessage());
        }                                
    
    }//GEN-LAST:event_menuSaveActionPerformed

    private void menuDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDeleteActionPerformed
       jTextArea.setText(jTextArea.getText().replace(jTextArea.getSelectedText(),""));
    }//GEN-LAST:event_menuDeleteActionPerformed

    private void menuCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCloseActionPerformed
        System.out.println("Zamykamy Notatnik");
        System.exit(0);
    }//GEN-LAST:event_menuCloseActionPerformed

    private void menuSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveAsActionPerformed
            
       SaveAs SavAs = new SaveAs();
       SavAs.setVisible(true);
       SavAs.setLocation(700, 400);
                      
        
    }//GEN-LAST:event_menuSaveAsActionPerformed

    private void menuAboutMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAboutMeActionPerformed

        File plik = new File("CV.doc");

        Desktop pulpit = Desktop.getDesktop();

        try {
            pulpit.open(plik);
        } catch (IOException ex) {
            System.out.println("Bład wychwycony. To jest błąd: " + ex.getMessage());
        }
    }//GEN-LAST:event_menuAboutMeActionPerformed

    private void menuInformationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuInformationActionPerformed
        
        File plik = new File("information.txt");
        
        Desktop pulpit = Desktop.getDesktop();
        
        try {
            pulpit.open(plik);
        } catch (IOException ex) {
            System.out.println("Błąd wychwycony. To jest błąd: " + ex.getMessage());
        }
                
    }//GEN-LAST:event_menuInformationActionPerformed

    private void menuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuUndoActionPerformed
        
    }//GEN-LAST:event_menuUndoActionPerformed

    private void menuCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCopyActionPerformed
       jTextArea.copy();
    }//GEN-LAST:event_menuCopyActionPerformed

    private void menuPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPasteActionPerformed
        jTextArea.paste();
    }//GEN-LAST:event_menuPasteActionPerformed

    private void menuCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCutActionPerformed
        jTextArea.cut();
    }//GEN-LAST:event_menuCutActionPerformed

    private void jTextAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaKeyTyped
                                 
    }//GEN-LAST:event_jTextAreaKeyTyped

    private void menuFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFindActionPerformed
                
       Find find = new Find();
       find.setVisible(true);
       find.setLocation(700, 400);              
                 
    }//GEN-LAST:event_menuFindActionPerformed

    private void menuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewActionPerformed
    
       SaveNew SavNew = new SaveNew();
       SavNew.setVisible(true);
       SavNew.setLocation(700, 400);                     
              
        
    }//GEN-LAST:event_menuNewActionPerformed

    private void jSaveAsFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveAsFileActionPerformed
           
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showSaveDialog(this);

        File file = fileChooser.getSelectedFile();

        try {
            BufferedWriter fileWriter = new BufferedWriter(new FileWriter(file));

            String[] lines = jTextArea.getText().split("\\n");

            for (String line : lines) {
                //System.out.println(lines[i]);                
                fileWriter.write(line);
                fileWriter.newLine();
            }

            fileWriter.close();

        } catch (IOException ex) {
            System.out.println("Exception:" + ex.getMessage());
        }                      
            
    }//GEN-LAST:event_jSaveAsFileActionPerformed

    private void menuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenActionPerformed
       
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(this);

        try {
            File file = fileChooser.getSelectedFile();
            BufferedReader bufferedReader = new BufferedReader(new FileReader(file.getPath()));

            String line = "";
            String actualLine = "";

            while ((line = bufferedReader.readLine()) != null) {

                actualLine += line + "\n";

            }
            jTextArea.setText(actualLine);
            bufferedReader.close();

        } catch (IOException ex) {
            System.out.println("Exception:" + ex.getMessage());
        }

    }//GEN-LAST:event_menuOpenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Notatnik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Notatnik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Notatnik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Notatnik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Notatnik().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu gorneMenuEdit;
    private javax.swing.JMenu gorneMenuFile;
    private javax.swing.JMenu gorneMenuHelp;
    private javax.swing.JMenuItem jSaveAsFile;
    private javax.swing.JScrollPane jScrollPane;
    public static javax.swing.JTextArea jTextArea;
    private javax.swing.JMenuItem menuAboutMe;
    private javax.swing.JMenuItem menuClose;
    private javax.swing.JMenuItem menuCopy;
    private javax.swing.JMenuItem menuCut;
    private javax.swing.JMenuItem menuDelete;
    private javax.swing.JMenuItem menuFind;
    private javax.swing.JMenuItem menuInformation;
    private javax.swing.JMenuItem menuNew;
    public static javax.swing.JMenuItem menuOpen;
    private javax.swing.JMenuItem menuPaste;
    private javax.swing.JMenuItem menuSave;
    private javax.swing.JMenuItem menuSaveAs;
    private javax.swing.JMenuItem menuUndo;
    private javax.swing.JMenuBar pasekMenuBar;
    // End of variables declaration//GEN-END:variables

}
